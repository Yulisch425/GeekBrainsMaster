""" 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод init()), который должен
принимать данные (список списков) для формирования матрицы. Следующий шаг — реализовать
перегрузку метода str() для вывода матрицы в привычном виде. Далее реализовать перегрузку метода add() для реализации
операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
"""

class Matrix:
    def __init__(self, my_list):
        self.my_list = my_list

    def __str__(self):
        for row in self.my_list:
            for i in row:
                print(f"{i:4}", end="")
            print()
        return ''

    def __add__(self, other):
        for i in range(len(self.my_list)):
            for i_2 in range(len(other.my_list[i])):
                self.my_list[i][i_2] = self.my_list[i][i_2] + other.my_list[i][i_2]
        return Matrix.__str__(self)


m = Matrix([[-1, 0, 1], [-1, 0, 1], [0, 1, -1], [1, 1, -1]])
new_m = Matrix([[-2, 0, 2], [-2, 0, 2], [0, 2, -2], [2, 2, -7]])
print(m.__add__(new_m))


""" 2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого 
проекта — одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм. 
У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и 
H, соответственно. Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 
0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных. Реализовать общий подсчет расхода 
ткани. Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов 
проекта, проверить на практике работу декоратора @property. """

from abc import ABC, abstractmethod


class WorkingForm(ABC):
    @abstractmethod
    def fabric_calculation(self):
        pass


class Coat(WorkingForm):
    def __init__(self, v):
        self.v = v

    @property
    def fabric_calculation(self):
        V = self.v / 6.5 + 0.5
        return f'Для пальто нужно: {V} метров ткани.'


class Suite(WorkingForm):
    def __init__(self, h):
        self.h = h

    @property
    def fabric_calculation(self):
        H = 2 * self.h + 0.3
        return f'Для костюма нужно: {H} метров ткани.'


class TotalFabric(WorkingForm):
    def __init__(self, v, h):
        self.V = v
        self.H = h

    @property
    def fabric_calculation(self):
        all = (self.V / 6.5 + 0.5) + (2 * self.H + 0.3)
        return f'Количество затраченной ткани равно: {all} метров.'


coat = Coat(100)
suite = Suite(50)
total = TotalFabric(100, 50)
print(suite.fabric_calculation)
print(coat.fabric_calculation)
print(total.fabric_calculation)

""" 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. 
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). 
В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), 
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к 
клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. 
В методе деления должно осуществляться округление значения до целого числа. 
- Сложение. Объединение двух клеток. При этом число ячеек общей 
клетки должно равняться сумме ячеек исходных двух клеток. 
- Вычитание. Участвуют две клетки. Операцию необходимо 
выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. 
- Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек 
этих двух клеток. 
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное 
деление количества ячеек этих двух клеток. 
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку 
вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование 
ряда не хватает, то в последний ряд записываются все оставшиеся."""


class Cell:
    def __init__(self, num: int):
        self.number_of_cells = num
    def __add__(self, other):
        return f'Операция объединения двух клеток. Результат: {self.number_of_cells + other.number_of_cells}'
    def __sub__(self, other):
        if self.number_of_cells - other.number_of_cells != 0:
            a = self.number_of_cells - other.number_of_cells
            b = (a)
            return f'Вычитание клеток. Результат: {b}'
        else:
            return f'Клетка больше не существует.'
    def __mul__(self, other):
        return f'Умножение клеток. Результат: {self.number_of_cells * other.number_of_cells}'
    def __truediv__(self, other):
        return f'Деление клеток. Результат: {self.number_of_cells // other.number_of_cells}'
    def make_order(self, inrow):
        cel = ''
        for i in range(int(self.number_of_cells / inrow)):
            cel += '*' * inrow + '\n'
        cel += '*' * (self.number_of_cells % inrow) + '\n'
        return cel


cell1 = Cell(100)
cell2 = Cell(200)
print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 * cell2)
print(cell1 / cell2)
print(cell1.make_order(100))